import streamlit as st
import pandas as pd
import joblib
import numpy as np
import os
from sklearn.metrics import precision_score, recall_score, f1_score, make_scorer

# D√©finir le chemin du mod√®le
model_path = 'best_model_logreg_f1_Sans_resampling.joblib'

# V√©rifier si le fichier existe
if not os.path.exists(model_path):
    st.error(f"Le fichier mod√®le '{model_path}' n'existe pas. Veuillez v√©rifier le chemin du fichier.")
    model = None
else:
    # Charger le mod√®le entra√Æn√©
    try:
        model = joblib.load(model_path)
        st.success("Mod√®le charg√© avec succ√®s!")
    except Exception as e:
        st.error(f"Erreur lors du chargement du mod√®le: {e}")
        model = None

# Titre de l'application
st.title("ü©∫ Application de Pr√©diction d'HPP s√©v√®re")

# Uploader le fichier CSV
uploaded_file = st.file_uploader("Importer votre fichier CSV avec les variables n√©cessaires", type="csv")

if uploaded_file and model is not None:
    # Lire le CSV
    data = pd.read_csv(uploaded_file)
    st.write("### Donn√©es import√©es :")
    st.dataframe(data.head())

    # V√©rifier si les donn√©es sont compatibles avec le mod√®le
    if st.button("Pr√©dire"):
        with st.spinner('Pr√©dictions en cours...'):
            try:
                # V√©rifier et traiter les valeurs manquantes
                if data.isna().any().any():
                    # Compter le nombre de lignes avant le dropna
                    rows_before = len(data)
                    
                    # Supprimer les lignes avec des valeurs manquantes
                    data = data.dropna()
                    
                    # Compter le nombre de lignes apr√®s le dropna
                    rows_after = len(data)
                    rows_removed = rows_before - rows_after
                    
                    # Afficher un message d'avertissement
                    st.warning(f"Des valeurs manquantes ont √©t√© d√©tect√©es dans les donn√©es. {rows_removed} lignes contenant des valeurs manquantes ont √©t√© supprim√©es. Nombre de lignes restantes: {rows_after}.")
                
                # Extraire le pr√©processeur du pipeline si le mod√®le est un pipeline
                if hasattr(model, 'named_steps') and 'preprocessor' in model.named_steps:
                    preprocessor = model.named_steps['preprocessor']
                    # Pr√©traiter les donn√©es
                    X_processed = preprocessor.transform(data)
                    # Faire la pr√©diction avec le mod√®le
                    classifier = model.named_steps['classifier']
                    predictions = classifier.predict(X_processed)
                    prediction_probs = classifier.predict_proba(X_processed)[:, 1]
                else:
                    # Si le mod√®le n'a pas de pr√©processeur explicite, retourner une erreur
                    st.error("Le mod√®le ne contient pas de pr√©processeur. Un pr√©processeur est n√©cessaire pour traiter les donn√©es avant la pr√©diction.")
                    raise ValueError("Mod√®le sans pr√©processeur d√©tect√©. Impossible de continuer la pr√©diction.")

                # Ajouter les r√©sultats au DataFrame
                data['Pr√©diction'] = predictions
                data['Probabilit√©_HPP (%)'] = prediction_probs * 100  # Convertir en pourcentage

                # Trier les r√©sultats par probabilit√© d'HPP d√©croissante
                data_sorted = data.sort_values(by='Probabilit√©_HPP (%)', ascending=False)

                # Afficher les r√©sultats
                st.write("### R√©sultats des Pr√©dictions (tri√©s par probabilit√© d'HPP d√©croissante) :")
                st.dataframe(data_sorted)
                
                # Afficher les m√©triques si disponibles
                if 'y' in data.columns:
                    st.write("### M√©triques d'√©valuation :")
                    precision = precision_score(data['y'], predictions, zero_division=0)
                    recall = recall_score(data['y'], predictions, zero_division=0)
                    f1 = f1_score(data['y'], predictions, zero_division=0)
                    st.write(f"Pr√©cision: {precision:.4f} - Mesure la proportion de cas positifs correctement identifi√©s parmi tous les cas pr√©dits positifs.")
                    st.write(f"Rappel: {recall:.4f} - Mesure la proportion de cas positifs correctement identifi√©s parmi tous les cas r√©ellement positifs.")
                    st.write(f"Score F1: {f1:.4f} - Moyenne harmonique entre pr√©cision et rappel, √©quilibrant ces deux m√©triques.")
                    
                    st.info("Pour la pr√©diction d'HPP s√©v√®re, un rappel √©lev√© est particuli√®rement important car il indique la capacit√© du mod√®le √† identifier correctement les cas √† risque, minimisant ainsi les faux n√©gatifs qui pourraient √™tre dangereux dans un contexte m√©dical.")

                # Bouton de t√©l√©chargement des r√©sultats (tri√©s)
                csv = data_sorted.to_csv(index=False).encode('utf-8')
                st.download_button(
                    label="T√©l√©charger les r√©sultats en CSV",
                    data=csv,
                    file_name='resultats_predictions.csv',
                    mime='text/csv',
                )
            except Exception as e:
                st.error(f"Erreur lors de la pr√©diction: {e}")
                st.write("Veuillez v√©rifier que votre fichier contient toutes les variables n√©cessaires au mod√®le.")
